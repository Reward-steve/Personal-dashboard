##Enhancing the System with Upgrade Requests & Admin Verification##

--How the User Upgrade System Works--
--Doctors/Staff request an upgrade (e.g., a staff wants to become a doctor).
--The request is stored in the database and marked as pending.
--An admin receives the request and reviews it.
--The admin approves/rejects the request.
--If approved, the user's role is updated.

1Ô∏è‚É£ Updated User Model
The User Schema now includes:
--role: The current role (patient, staff, doctor, admin).
--upgradeRequest: If they requested an upgrade.
--upgradeStatus: Tracks if it's pending, approved, or rejected.

``const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String,
    role: { type: String, enum: ['patient', 'staff', 'doctor', 'admin'], default: 'patient' },
    upgradeRequest: { type: String, enum: ['staff', 'doctor'], default: null },
    upgradeStatus: { type: String, enum: ['pending', 'approved', 'rejected'], default: null }
});

module.exports = mongoose.model('User', UserSchema);``

2Ô∏è‚É£ User Upgrade Request API
This allows staff or patients to request an upgrade.

üîπ Route:
Method	    Endpoint	                    Description
POST	    /api/users/request-upgrade	    Submit an upgrade request

üîπ Controller Logic:
const User = require('../models/User');

``exports.requestUpgrade = async (req, res) => {
    try {
        const { upgradeRequest } = req.body;
        const user = await User.findById(req.user.id);

        if (user.upgradeStatus === 'pending') {
            return res.status(400).json({ message: 'You already have a pending upgrade request.' });
        }

        user.upgradeRequest = upgradeRequest;
        user.upgradeStatus = 'pending';
        await user.save();

        return res.status(200).json({ message: 'Upgrade request submitted successfully.' });
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};``

3Ô∏è‚É£ Admin Reviewing Upgrade Requests
The admin should be able to view all upgrade requests and approve/reject them.

üîπ Routes:
Method	        Endpoint	                            Description
GET	            /api/admin/upgrade-requests	            Get all upgrade requests
POST	        /api/admin/approve-upgrade/:userId	    Approve an upgrade request
POST	        /api/admin/reject-upgrade/:userId	    Reject an upgrade request


üîπ Controller Logic:

``exports.getUpgradeRequests = async (req, res) => {
    try {
        const requests = await User.find({ upgradeStatus: 'pending' });
        res.status(200).json(requests);
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

exports.approveUpgrade = async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        if (!user || user.upgradeStatus !== 'pending') {
            return res.status(400).json({ message: 'No pending upgrade found.' });
        }

        user.role = user.upgradeRequest;
        user.upgradeStatus = 'approved';
        user.upgradeRequest = null;
        await user.save();

        res.status(200).json({ message: `User upgraded to ${user.role}` });
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

exports.rejectUpgrade = async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        if (!user || user.upgradeStatus !== 'pending') {
            return res.status(400).json({ message: 'No pending upgrade found.' });
        }

        user.upgradeStatus = 'rejected';
        user.upgradeRequest = null;
        await user.save();

        res.status(200).json({ message: 'Upgrade request rejected.' });
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};``


4Ô∏è‚É£ Notifications for Users
Once an admin approves/rejects a request, the user should get notified.

üîπ Notification Schema
const NotificationSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    message: String,
    isRead: { type: Boolean, default: false },
});

module.exports = mongoose.model('Notification', NotificationSchema);

üîπ Send Notifications After Admin Action
Modify approveUpgrade and rejectUpgrade to send notifications.

``const Notification = require('../models/Notification');

exports.approveUpgrade = async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        if (!user || user.upgradeStatus !== 'pending') {
            return res.status(400).json({ message: 'No pending upgrade found.' });
        }

        user.role = user.upgradeRequest;
        user.upgradeStatus = 'approved';
        user.upgradeRequest = null;
        await user.save();

        // Send notification
        await Notification.create({
            user: user._id,
            message: `Your upgrade request has been approved! You are now a ${user.role}.`
        });

        res.status(200).json({ message: `User upgraded to ${user.role}` });
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

exports.rejectUpgrade = async (req, res) => {
    try {
        const user = await User.findById(req.params.userId);
        if (!user || user.upgradeStatus !== 'pending') {
            return res.status(400).json({ message: 'No pending upgrade found.' });
        }

        user.upgradeStatus = 'rejected';
        user.upgradeRequest = null;
        await user.save();

        // Send notification
        await Notification.create({
            user: user._id,
            message: `Your upgrade request has been rejected. Contact admin for more details.`
        });

        res.status(200).json({ message: 'Upgrade request rejected.' });
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' });
    }
};``


5Ô∏è‚É£ Routes Overview
User Routes
Method	        Endpoint	                        Description
POST	        /api/users/request-upgrade	    Submit an upgrade request

Admin Routes
Method	        Endpoint	                                Description
GET	            /api/admin/upgrade-requests	                Get all upgrade requests
POST	        /api/admin/approve-upgrade/:userId	        Approve an upgrade request
POST	        /api/admin/reject-upgrade/:userId	        Reject an upgrade request













